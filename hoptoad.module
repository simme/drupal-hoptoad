<?php

/**
 * Implementation of hook_boo().
 *
 * If 'hoptoad_path' is set in settings.php we load the library on boot.
 * 'hoptoad_path' __MUST__ include a trailing slash.
 */
function hoptoad_boot() {
  $path = variable_get('hoptoad_path', FALSE);
  $path = $path ? $path . 'Services/Hoptoad.php' : FALSE;
  if ($path) {
    hoptoad_load_class($path);
  }
}

/**
 * Implementation of hook_init().
 */
function hoptoad_init() {
  $path = libraries_get_path('php-hoptoad-notifier') . '/Services/Hoptoad.php';
  hoptoad_load_class($path);
}

/**
 * Implementation of hook_cron().
 */
function hoptoad_cron() {
  $hoptoad = hoptoad_load_class();

  // Get a few of the old reports and shove 'em up to Hoptoad
  $reports = db_query_range(
    "SELECT * FROM {hoptoad_queue} ORDER BY id ASC",
    0,
    variable_get('hoptoad_cron_limit', 30)
  );
  while ($report = db_fetch_object($reports)) {
    $report = $report->report;
    call_user_func_array(array($hoptoad, 'notify'), $report);

    // Delete the report from database
    db_query("DELETE FROM {hoptoad_queue} WHERE id = %d", $report->id);
  }
}

/**
 * Load Drupal Hoptoad
 *
 * @param $path
 *   Path to the Hoptoad class
 * @return hoptoad
 */
function hoptoad_load_class($path = '') {
  static $hoptoad;

  if (empty($path) && isset($hoptoad)) {
    return $hoptoad;
  }
  else if (!isset($hoptoad) && file_exists($path)) {
    require_once($path);
    require_once(drupal_get_path('module', 'hoptoad') . '/DrupalHoptoad.php');

    // Create new hoptoadz
    $hoptoad = new DrupalHoptoad(
      variable_get('hoptoad_api_key', ''),
      variable_get('hoptoad_environment', 'production'),
      variable_get('hoptoad_client', 'curl')
    );

    // Register ourselves as the error handler
    $hoptoad->installNotifierHandlers();
  }
}